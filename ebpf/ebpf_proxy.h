/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __EBPF_PROXY_EBPF_SKEL_H__
#define __EBPF_PROXY_EBPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct ebpf_proxy_ebpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *ipv4addr;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *xdp_pass_prog;
	} progs;
	struct {
		struct bpf_link *xdp_pass_prog;
	} links;

#ifdef __cplusplus
	static inline struct ebpf_proxy_ebpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct ebpf_proxy_ebpf *open_and_load();
	static inline int load(struct ebpf_proxy_ebpf *skel);
	static inline int attach(struct ebpf_proxy_ebpf *skel);
	static inline void detach(struct ebpf_proxy_ebpf *skel);
	static inline void destroy(struct ebpf_proxy_ebpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
ebpf_proxy_ebpf__destroy(struct ebpf_proxy_ebpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
ebpf_proxy_ebpf__create_skeleton(struct ebpf_proxy_ebpf *obj);

static inline struct ebpf_proxy_ebpf *
ebpf_proxy_ebpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct ebpf_proxy_ebpf *obj;
	int err;

	obj = (struct ebpf_proxy_ebpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = ebpf_proxy_ebpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	ebpf_proxy_ebpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct ebpf_proxy_ebpf *
ebpf_proxy_ebpf__open(void)
{
	return ebpf_proxy_ebpf__open_opts(NULL);
}

static inline int
ebpf_proxy_ebpf__load(struct ebpf_proxy_ebpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct ebpf_proxy_ebpf *
ebpf_proxy_ebpf__open_and_load(void)
{
	struct ebpf_proxy_ebpf *obj;
	int err;

	obj = ebpf_proxy_ebpf__open();
	if (!obj)
		return NULL;
	err = ebpf_proxy_ebpf__load(obj);
	if (err) {
		ebpf_proxy_ebpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
ebpf_proxy_ebpf__attach(struct ebpf_proxy_ebpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
ebpf_proxy_ebpf__detach(struct ebpf_proxy_ebpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *ebpf_proxy_ebpf__elf_bytes(size_t *sz);

static inline int
ebpf_proxy_ebpf__create_skeleton(struct ebpf_proxy_ebpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "ebpf_proxy_ebpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "ipv4addr";
	s->maps[0].map = &obj->maps.ipv4addr;

	s->maps[1].name = "ebpf_pro.rodata";
	s->maps[1].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "xdp_pass_prog";
	s->progs[0].prog = &obj->progs.xdp_pass_prog;
	s->progs[0].link = &obj->links.xdp_pass_prog;

	s->data = ebpf_proxy_ebpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *ebpf_proxy_ebpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x14\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1c\0\
\x01\0\xb7\x01\0\0\x01\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\
\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\
\0\x15\0\x05\0\0\0\0\0\x61\x03\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x03\0\0\0\x05\0\x04\0\0\0\0\0\x61\xa3\xfc\xff\0\0\0\0\x18\x01\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x1a\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\
\x02\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x25\x78\0\x4c\x6f\x6f\x6b\x20\x75\x70\x20\
\x66\x61\x69\x6c\x65\x64\x20\x66\x6f\x72\x20\x6b\x65\x79\x20\x25\x78\0\x13\0\0\
\0\x05\0\x08\0\x01\0\0\0\x04\0\0\0\x04\x38\x90\x01\x01\x50\0\x01\x11\x01\x25\
\x25\x13\x05\x03\x25\x72\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\x8c\x01\
\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\
\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\
\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\x0b\0\0\x07\x2e\x01\x11\x1b\x12\x06\x40\
\x18\x7a\x19\x03\x25\x3a\x0b\x3b\x0b\x27\x19\x49\x13\x3f\x19\0\0\x08\x34\0\x03\
\x25\x49\x13\x3a\x0b\x3b\x0b\x02\x18\0\0\x09\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\
\x13\0\0\x0a\x34\0\x02\x18\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x0b\x34\0\x02\
\x22\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x0c\x26\0\x49\x13\0\0\x0d\x13\x01\x0b\
\x0b\x3a\x0b\x3b\x0b\0\0\x0e\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x38\x0b\0\0\
\x0f\x0f\0\x49\x13\0\0\x10\x16\0\x49\x13\x03\x25\x3a\x0b\x3b\x0b\0\0\x11\x34\0\
\x03\x25\x49\x13\x3a\x0b\x3b\x0b\0\0\x12\x15\x01\x49\x13\x27\x19\0\0\x13\x05\0\
\x49\x13\0\0\x14\x0f\0\0\0\x15\x26\0\0\0\x16\x18\0\0\0\x17\x04\x01\x49\x13\x03\
\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x18\x28\0\x03\x25\x1c\x0f\0\0\x19\x13\x01\x03\
\x25\x0b\x0b\x3a\x0b\x3b\x05\0\0\x1a\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\x38\
\x0b\0\0\0\xba\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x1d\0\x01\x08\0\0\0\0\0\0\0\
\x02\x04\xa0\0\0\0\x08\0\0\0\x0c\0\0\0\x02\x03\x32\0\0\0\0\x05\x02\xa1\0\x03\
\x3e\0\0\0\x04\x42\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\x07\x07\x04\xa0\0\0\
\0\x01\x5a\x18\0\x10\xea\0\0\0\x08\x06\x88\0\0\0\0\x18\x02\xa1\x01\x08\x06\x99\
\0\0\0\0\x1a\x02\xa1\x02\x09\x1a\0\x10\x75\x01\0\0\x0a\x02\x91\x04\x0a\0\x12\
\xf3\0\0\0\x0b\0\x19\0\x13\xee\0\0\0\0\x03\x94\0\0\0\x04\x42\0\0\0\x03\0\x0c\
\x3e\0\0\0\x03\x94\0\0\0\x04\x42\0\0\0\x1a\0\x02\x07\xb0\0\0\0\0\x0c\x02\xa1\
\x03\x0d\x20\0\x07\x0e\x08\xd9\0\0\0\0\x08\0\x0e\x0a\xee\0\0\0\0\x09\x08\x0e\
\x0d\xee\0\0\0\0\x0a\x10\x0e\x0e\xff\0\0\0\0\x0b\x18\0\x0f\xde\0\0\0\x03\xea\0\
\0\0\x04\x42\0\0\0\x02\0\x05\x09\x05\x04\x0f\xf3\0\0\0\x10\xfb\0\0\0\x0c\x01\
\x1b\x05\x0b\x07\x04\x0f\x04\x01\0\0\x03\xea\0\0\0\x04\x42\0\0\0\x04\0\x11\x0f\
\x18\x01\0\0\x02\x38\x0f\x1d\x01\0\0\x12\x2d\x01\0\0\x13\x2d\x01\0\0\x13\x2e\
\x01\0\0\0\x14\x0f\x33\x01\0\0\x15\x11\x10\x3c\x01\0\0\x02\xb1\x0f\x41\x01\0\0\
\x12\x52\x01\0\0\x13\x56\x01\0\0\x13\xf3\0\0\0\x16\0\x05\x11\x05\x08\x0f\x94\0\
\0\0\x17\xfb\0\0\0\x17\x04\x03\xa8\x18\x18\x12\0\x18\x13\x01\x18\x14\x02\x18\
\x15\x03\x18\x16\x04\0\x0f\x7a\x01\0\0\x19\x21\x18\x03\xb3\x18\x1a\x1b\xf3\0\0\
\0\x03\xb4\x18\0\x1a\x1c\xf3\0\0\0\x03\xb5\x18\x04\x1a\x1d\xf3\0\0\0\x03\xb6\
\x18\x08\x1a\x1e\xf3\0\0\0\x03\xb8\x18\x0c\x1a\x1f\xf3\0\0\0\x03\xb9\x18\x10\
\x1a\x20\xf3\0\0\0\x03\xbb\x18\x14\0\0\x8c\0\0\0\x05\0\0\0\0\0\0\0\x15\0\0\0\
\x27\0\0\0\x4d\0\0\0\x56\0\0\0\x5b\0\0\0\x6f\0\0\0\x77\0\0\0\x80\0\0\0\x85\0\0\
\0\x89\0\0\0\x8d\0\0\0\x9a\0\0\0\xa0\0\0\0\xa6\0\0\0\xb2\0\0\0\xc6\0\0\0\xd7\0\
\0\0\xdc\0\0\0\xe8\0\0\0\xf1\0\0\0\xfa\0\0\0\x01\x01\0\0\x0e\x01\0\0\x19\x01\0\
\0\x27\x01\0\0\x2b\x01\0\0\x2f\x01\0\0\x34\x01\0\0\x3d\x01\0\0\x47\x01\0\0\x57\
\x01\0\0\x66\x01\0\0\x75\x01\0\0\x63\x6c\x61\x6e\x67\x20\x76\x65\x72\x73\x69\
\x6f\x6e\x20\x31\x37\x2e\x30\x2e\x36\0\x65\x62\x70\x66\x5f\x70\x72\x6f\x78\x79\
\x2e\x65\x62\x70\x66\x2e\x63\0\x2f\x68\x6f\x6d\x65\x2f\x6a\x65\x77\x67\x61\x64\
\x2f\x70\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x62\x70\x66\x5f\x70\x72\x6f\x78\
\x79\x2f\x65\x62\x70\x66\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x63\x68\x61\x72\0\
\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\
\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x69\x70\x76\x34\x61\x64\x64\x72\0\x74\x79\x70\
\x65\0\x69\x6e\x74\0\x6b\x65\x79\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\
\x74\0\x5f\x5f\x75\x33\x32\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\
\x72\x69\x65\x73\0\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\
\x65\x6c\x65\x6d\0\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\x70\x72\x69\x6e\x74\
\x6b\0\x6c\x6f\x6e\x67\0\x58\x44\x50\x5f\x41\x42\x4f\x52\x54\x45\x44\0\x58\x44\
\x50\x5f\x44\x52\x4f\x50\0\x58\x44\x50\x5f\x50\x41\x53\x53\0\x58\x44\x50\x5f\
\x54\x58\0\x58\x44\x50\x5f\x52\x45\x44\x49\x52\x45\x43\x54\0\x78\x64\x70\x5f\
\x61\x63\x74\x69\x6f\x6e\0\x78\x64\x70\x5f\x70\x61\x73\x73\x5f\x70\x72\x6f\x67\
\0\x72\x65\x74\0\x63\x74\x78\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\
\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\
\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\
\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x78\x64\
\x70\x5f\x6d\x64\0\x2c\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\x44\x02\0\0\x44\x02\0\0\x13\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x02\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\x19\
\0\0\0\0\0\0\x08\x07\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\
\0\x02\x09\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\
\0\x04\0\0\x04\x20\0\0\0\x2c\0\0\0\x01\0\0\0\0\0\0\0\x31\0\0\0\x05\0\0\0\x40\0\
\0\0\x35\0\0\0\x05\0\0\0\x80\0\0\0\x3b\0\0\0\x08\0\0\0\xc0\0\0\0\x47\0\0\0\0\0\
\0\x0e\x0a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0d\0\0\0\x50\0\0\0\x06\0\0\x04\
\x18\0\0\0\x57\0\0\0\x06\0\0\0\0\0\0\0\x5c\0\0\0\x06\0\0\0\x20\0\0\0\x65\0\0\0\
\x06\0\0\0\x40\0\0\0\x6f\0\0\0\x06\0\0\0\x60\0\0\0\x7f\0\0\0\x06\0\0\0\x80\0\0\
\0\x8e\0\0\0\x06\0\0\0\xa0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x9d\0\0\0\x0c\0\
\0\0\xa1\0\0\0\x01\0\0\x0c\x0e\0\0\0\xc1\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\
\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x10\0\0\0\x04\0\0\0\x04\0\0\0\xc6\x01\0\0\0\0\0\
\x0e\x11\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x10\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x13\0\0\0\x04\0\0\0\x03\0\0\0\xcf\x01\0\0\0\0\0\x0e\x14\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x13\0\0\0\x04\0\0\0\x1a\0\0\0\xe5\x01\0\0\0\0\0\x0e\x16\0\0\
\0\0\0\0\0\xfd\x01\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\0\0\0\0\0\x20\0\0\0\x03\x02\
\0\0\x02\0\0\x0f\0\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x17\0\0\0\x03\0\0\0\x1a\0\
\0\0\x0b\x02\0\0\x01\0\0\x0f\0\0\0\0\x12\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\
\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\
\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x74\
\x79\x70\x65\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\
\x72\x69\x65\x73\0\x69\x70\x76\x34\x61\x64\x64\x72\0\x78\x64\x70\x5f\x6d\x64\0\
\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\
\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\
\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\
\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x63\x74\x78\0\x78\x64\x70\x5f\x70\x61\
\x73\x73\x5f\x70\x72\x6f\x67\0\x78\x64\x70\0\x2f\x68\x6f\x6d\x65\x2f\x6a\x65\
\x77\x67\x61\x64\x2f\x70\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x62\x70\x66\x5f\
\x70\x72\x6f\x78\x79\x2f\x65\x62\x70\x66\x2f\x65\x62\x70\x66\x5f\x70\x72\x6f\
\x78\x79\x2e\x65\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x78\x64\x70\x5f\x70\x61\
\x73\x73\x5f\x70\x72\x6f\x67\x28\x73\x74\x72\x75\x63\x74\x20\x78\x64\x70\x5f\
\x6d\x64\x20\x2a\x63\x74\x78\x29\x20\x7b\0\x20\x20\x5f\x5f\x75\x33\x32\x20\x6b\
\x65\x79\x20\x3d\x20\x30\x78\x31\x3b\0\x20\x20\x72\x65\x74\x20\x3d\x20\x62\x70\
\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\
\x69\x70\x76\x34\x61\x64\x64\x72\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x20\x20\x69\
\x66\x28\x72\x65\x74\x29\x20\x7b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\
\x6e\x74\x6b\x28\x22\x25\x78\x22\x2c\x20\x2a\x72\x65\x74\x29\x3b\0\x20\x20\x20\
\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x4c\x6f\x6f\x6b\x20\x75\
\x70\x20\x66\x61\x69\x6c\x65\x64\x20\x66\x6f\x72\x20\x6b\x65\x79\x20\x25\x78\
\x22\x2c\x20\x6b\x65\x79\x29\x3b\0\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x58\x44\
\x50\x5f\x50\x41\x53\x53\x3b\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x78\x64\x70\x5f\x70\x61\x73\x73\x5f\x70\x72\x6f\x67\x2e\x5f\x5f\x5f\x5f\
\x66\x6d\x74\0\x78\x64\x70\x5f\x70\x61\x73\x73\x5f\x70\x72\x6f\x67\x2e\x5f\x5f\
\x5f\x5f\x66\x6d\x74\x2e\x31\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\
\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\
\0\x14\0\0\0\x8c\0\0\0\xa0\0\0\0\0\0\0\0\x08\0\0\0\xaf\0\0\0\x01\0\0\0\0\0\0\0\
\x0f\0\0\0\x10\0\0\0\xaf\0\0\0\x08\0\0\0\0\0\0\0\xb3\0\0\0\xeb\0\0\0\0\x40\0\0\
\x08\0\0\0\xb3\0\0\0\x13\x01\0\0\x09\x48\0\0\x20\0\0\0\xb3\0\0\0\x26\x01\0\0\
\x09\x54\0\0\x38\0\0\0\xb3\0\0\0\x54\x01\0\0\x06\x5c\0\0\x40\0\0\0\xb3\0\0\0\
\x60\x01\0\0\x05\x60\0\0\x68\0\0\0\xb3\0\0\0\x7c\x01\0\0\x05\x68\0\0\x88\0\0\0\
\xb3\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\xb3\0\0\0\xae\x01\0\0\x03\x78\0\0\x0c\0\0\
\0\xff\xff\xff\xff\x04\0\x08\0\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xa0\0\0\0\0\0\0\0\xb7\0\0\0\x05\0\x08\0\x82\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\
\x01\x01\x01\x01\0\0\0\x01\0\0\x01\x01\x01\x1f\x04\0\0\0\0\x26\0\0\0\x3f\0\0\0\
\x50\0\0\0\x03\x01\x1f\x02\x0f\x05\x1e\x04\x63\0\0\0\0\xf6\x09\xd6\xf3\x64\xe6\
\x7c\x11\x32\x7e\x74\x41\x73\x3e\xb9\x98\x75\0\0\0\x01\xb8\x10\xf2\x70\x73\x3e\
\x10\x63\x19\xb6\x7e\xf5\x12\xc6\x24\x6e\x80\0\0\0\x02\x09\xcf\xcd\x71\x69\xc2\
\x4b\xec\x44\x8f\x30\x58\x2e\x8c\x6d\xb9\x92\0\0\0\x03\x59\x15\xea\xc3\xbf\x7f\
\x25\x49\x8b\x16\x4b\x75\x5f\x1a\xe9\xb7\x04\0\0\x09\x02\0\0\0\0\0\0\0\0\x03\
\x0f\x01\x05\x09\x0a\x22\x3f\x05\x06\x3e\x05\x05\x21\x5a\x05\0\x06\x03\x66\x4a\
\x05\x03\x06\x03\x1e\x20\x02\x02\0\x01\x01\x2f\x68\x6f\x6d\x65\x2f\x6a\x65\x77\
\x67\x61\x64\x2f\x70\x72\x6f\x6a\x65\x63\x74\x73\x2f\x65\x62\x70\x66\x5f\x70\
\x72\x6f\x78\x79\x2f\x65\x62\x70\x66\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\x6c\x75\
\x64\x65\x2f\x61\x73\x6d\x2d\x67\x65\x6e\x65\x72\x69\x63\0\x2f\x75\x73\x72\x2f\
\x69\x6e\x63\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\
\x6c\x75\x64\x65\x2f\x6c\x69\x6e\x75\x78\0\x65\x62\x70\x66\x5f\x70\x72\x6f\x78\
\x79\x2e\x65\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x2d\x6c\x6c\x36\x34\x2e\x68\0\
\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\x72\x5f\x64\x65\x66\x73\x2e\x68\0\x62\x70\
\x66\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf7\0\
\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x31\x01\0\0\0\0\x03\0\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x22\0\0\0\x01\0\x07\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x2a\x01\0\0\0\0\x03\
\0\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x01\0\0\x01\0\x07\0\x03\0\0\0\0\0\0\0\
\x1a\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x09\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0f\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x03\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x19\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xb1\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\0\x90\
\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xcd\0\0\0\x11\0\x05\0\0\0\
\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\0\x11\0\0\0\x48\0\0\0\
\0\0\0\0\x01\0\0\0\x07\0\0\0\x70\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x08\0\0\0\0\
\0\0\0\x03\0\0\0\x09\0\0\0\x11\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x15\0\0\0\0\0\
\0\0\x03\0\0\0\x0e\0\0\0\x1f\0\0\0\0\0\0\0\x03\0\0\0\x0c\0\0\0\x23\0\0\0\0\0\0\
\0\x03\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x0c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x1c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x24\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x2c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x34\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x3c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x44\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x4c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x54\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x5c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x64\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x6c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x74\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x78\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x7c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x80\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x84\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x88\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x8c\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x12\0\0\0\x10\0\0\0\0\0\0\0\
\x02\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x07\0\0\0\x20\0\0\0\0\0\0\0\
\x02\0\0\0\x11\0\0\0\x28\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x18\x02\0\0\0\0\0\0\
\x04\0\0\0\x11\0\0\0\x30\x02\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x3c\x02\0\0\0\0\0\
\0\x03\0\0\0\x07\0\0\0\x54\x02\0\0\0\0\0\0\x04\0\0\0\x12\0\0\0\x2c\0\0\0\0\0\0\
\0\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x90\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xa0\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xb0\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\x03\0\0\0\x0d\0\0\0\x18\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\x03\0\0\0\x0f\0\0\0\x26\0\0\0\0\0\0\0\
\x03\0\0\0\x0f\0\0\0\x2a\0\0\0\0\0\0\0\x03\0\0\0\x0f\0\0\0\x2e\0\0\0\0\0\0\0\
\x03\0\0\0\x0f\0\0\0\x3a\0\0\0\0\0\0\0\x03\0\0\0\x0f\0\0\0\x4f\0\0\0\0\0\0\0\
\x03\0\0\0\x0f\0\0\0\x64\0\0\0\0\0\0\0\x03\0\0\0\x0f\0\0\0\x79\0\0\0\0\0\0\0\
\x03\0\0\0\x0f\0\0\0\x93\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x10\x12\x11\x04\x06\
\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\x65\x76\0\x2e\x74\x65\x78\x74\0\
\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x78\x64\x70\x5f\x70\x61\x73\
\x73\x5f\x70\x72\x6f\x67\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x64\x65\x62\x75\
\x67\x5f\x6c\x6f\x63\x6c\x69\x73\x74\x73\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\
\x67\x5f\x73\x74\x72\x5f\x6f\x66\x66\x73\x65\x74\x73\0\x2e\x6d\x61\x70\x73\0\
\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\
\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x61\x64\
\x64\x72\0\x69\x70\x76\x34\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x78\x64\x70\0\x2e\
\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x69\x6e\x66\x6f\0\x78\x64\x70\x5f\x70\
\x61\x73\x73\x5f\x70\x72\x6f\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\
\x75\x67\x5f\x6c\x69\x6e\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\
\x72\x61\x6d\x65\0\x65\x62\x70\x66\x5f\x70\x72\x6f\x78\x79\x2e\x65\x62\x70\x66\
\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\
\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\x4c\x42\x42\x30\x5f\
\x33\0\x4c\x42\x42\x30\x5f\x32\0\x78\x64\x70\x5f\x70\x61\x73\x73\x5f\x70\x72\
\x6f\x67\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\x2e\x31\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\x01\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x5d\x13\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x9d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xa0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x99\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x0e\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x1b\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xce\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xe8\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\x01\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\x01\0\0\0\0\0\0\x1d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x38\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x25\x01\0\0\
\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3c\x01\0\0\0\0\0\0\x3a\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa5\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x76\x02\0\0\0\0\0\0\xbe\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa1\0\0\0\x09\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x0f\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x1b\0\0\0\
\x0a\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4c\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x34\x04\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x68\x0f\0\0\0\0\0\0\x20\x02\0\0\0\0\0\0\x1b\0\0\0\x0c\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x65\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc4\x04\0\0\0\0\0\0\x7c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\x84\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x06\0\0\
\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x80\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x11\0\0\0\0\0\0\x50\
\0\0\0\0\0\0\0\x1b\0\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x25\x01\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x06\0\0\0\0\0\0\x6f\x04\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x21\x01\0\0\x09\0\0\
\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x11\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x1b\
\0\0\0\x11\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x18\x12\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x1b\0\0\0\x13\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\xea\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xa0\x0b\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xe6\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x12\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\x1b\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\xda\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x0b\0\0\0\0\0\0\
\xbb\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd6\0\0\0\
\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x12\0\0\0\0\0\0\x90\0\0\0\0\0\
\0\0\x1b\0\0\0\x17\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x70\0\0\0\x01\0\0\
\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\x0c\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xbf\0\0\0\x03\x4c\xff\x6f\0\0\
\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x58\x13\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\x1b\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\x01\0\0\x02\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x20\x0d\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\
\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct ebpf_proxy_ebpf *ebpf_proxy_ebpf::open(const struct bpf_object_open_opts *opts) { return ebpf_proxy_ebpf__open_opts(opts); }
struct ebpf_proxy_ebpf *ebpf_proxy_ebpf::open_and_load() { return ebpf_proxy_ebpf__open_and_load(); }
int ebpf_proxy_ebpf::load(struct ebpf_proxy_ebpf *skel) { return ebpf_proxy_ebpf__load(skel); }
int ebpf_proxy_ebpf::attach(struct ebpf_proxy_ebpf *skel) { return ebpf_proxy_ebpf__attach(skel); }
void ebpf_proxy_ebpf::detach(struct ebpf_proxy_ebpf *skel) { ebpf_proxy_ebpf__detach(skel); }
void ebpf_proxy_ebpf::destroy(struct ebpf_proxy_ebpf *skel) { ebpf_proxy_ebpf__destroy(skel); }
const void *ebpf_proxy_ebpf::elf_bytes(size_t *sz) { return ebpf_proxy_ebpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
ebpf_proxy_ebpf__assert(struct ebpf_proxy_ebpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __EBPF_PROXY_EBPF_SKEL_H__ */
